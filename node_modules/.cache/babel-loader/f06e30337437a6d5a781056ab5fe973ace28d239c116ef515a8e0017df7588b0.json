{"ast":null,"code":"import jsPDF from 'jspdf';\nimport { A4_CONFIG } from '../store/templateStore';\nexport class PDFExporter {\n  constructor(templateGenerator, config) {\n    this.templateGenerator = templateGenerator;\n    this.config = config;\n  }\n  async exportToPDF(filename = 'handwriting-template.pdf') {\n    try {\n      // Create high-resolution version for PDF\n      const highResCanvas = this.createHighResolutionCanvas();\n      if (!highResCanvas) {\n        throw new Error('Failed to create high-resolution canvas');\n      }\n\n      // Generate the template at high resolution\n      await this.generateHighResTemplate(highResCanvas);\n\n      // Create PDF\n      const pdf = new jsPDF({\n        orientation: this.config.orientation === 'landscape' ? 'l' : 'p',\n        unit: 'mm',\n        format: 'a4'\n      });\n\n      // Convert canvas to image and add to PDF\n      const imgData = highResCanvas.toDataURL('image/png', 1.0);\n      const pdfWidth = this.config.orientation === 'landscape' ? A4_CONFIG.height : A4_CONFIG.width;\n      const pdfHeight = this.config.orientation === 'landscape' ? A4_CONFIG.width : A4_CONFIG.height;\n      pdf.addImage(imgData, 'PNG', 0, 0, pdfWidth, pdfHeight);\n\n      // Save the PDF\n      pdf.save(filename);\n\n      // Clean up\n      highResCanvas.remove();\n      return true;\n    } catch (error) {\n      console.error('Error exporting PDF:', error);\n      return false;\n    }\n  }\n  createHighResolutionCanvas() {\n    const canvas = document.createElement('canvas');\n    const ctx = canvas.getContext('2d');\n\n    // Set high DPI dimensions\n    canvas.width = A4_CONFIG.pixelWidth;\n    canvas.height = A4_CONFIG.pixelHeight;\n\n    // Scale context for high DPI\n    const scale = A4_CONFIG.dpi / 96; // 96 is standard screen DPI\n    ctx.scale(scale, scale);\n\n    // Set canvas style for proper rendering\n    canvas.style.width = A4_CONFIG.width + 'mm';\n    canvas.style.height = A4_CONFIG.height + 'mm';\n    return canvas;\n  }\n  async generateHighResTemplate(canvas) {\n    const ctx = canvas.getContext('2d');\n\n    // Clear canvas\n    ctx.fillStyle = 'white';\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n    // Calculate metrics for high resolution\n    const metrics = this.config.getCalculatedMetrics();\n    const margins = this.config.margins;\n\n    // Convert mm to pixels for high-res rendering\n    const mmToPixel = mm => mm * A4_CONFIG.dpi / 25.4;\n    const workArea = {\n      left: mmToPixel(margins.left),\n      top: mmToPixel(margins.top),\n      width: mmToPixel(A4_CONFIG.width - margins.left - margins.right),\n      height: mmToPixel(A4_CONFIG.height - margins.top - margins.bottom)\n    };\n\n    // Draw baselines\n    this.drawHighResBaselines(ctx, workArea, metrics, mmToPixel);\n\n    // Draw slant lines if enabled\n    if (this.config.showSlantLines) {\n      this.drawHighResSlantLines(ctx, workArea, metrics, mmToPixel);\n    }\n\n    // Draw grid if enabled\n    if (this.config.showGrid) {\n      this.drawHighResGrid(ctx, workArea, mmToPixel);\n    }\n  }\n  drawHighResBaselines(ctx, workArea, metrics, mmToPixel) {\n    const lineSpacing = mmToPixel(metrics.lineSpacing);\n    const xHeight = mmToPixel(metrics.xHeight);\n    const capHeight = mmToPixel(metrics.capHeight);\n    const ascenderHeight = mmToPixel(metrics.ascenderHeight);\n    const descenderDepth = mmToPixel(metrics.descenderDepth);\n    const startY = workArea.top + ascenderHeight;\n    const numberOfLines = Math.floor((workArea.height - ascenderHeight - descenderDepth) / lineSpacing);\n    ctx.lineCap = 'round';\n    for (let i = 0; i < numberOfLines; i++) {\n      const baselineY = startY + i * lineSpacing;\n\n      // Baseline (main writing line) - always show\n      ctx.strokeStyle = this.config.baselineColor;\n      ctx.lineWidth = 2;\n      this.drawLine(ctx, workArea.left, baselineY, workArea.left + workArea.width, baselineY);\n\n      // Only show guide lines if enabled\n      if (this.config.showGuideLines) {\n        // X-height line\n        ctx.strokeStyle = this.config.gridColor;\n        ctx.lineWidth = 1;\n        ctx.globalAlpha = 0.7;\n        this.drawLine(ctx, workArea.left, baselineY - xHeight, workArea.left + workArea.width, baselineY - xHeight);\n\n        // Cap height line\n        this.drawLine(ctx, workArea.left, baselineY - capHeight, workArea.left + workArea.width, baselineY - capHeight);\n\n        // Ascender line\n        ctx.globalAlpha = 0.5;\n        this.drawLine(ctx, workArea.left, baselineY - ascenderHeight, workArea.left + workArea.width, baselineY - ascenderHeight);\n\n        // Descender line\n        this.drawLine(ctx, workArea.left, baselineY + descenderDepth, workArea.left + workArea.width, baselineY + descenderDepth);\n        ctx.globalAlpha = 1;\n      }\n    }\n  }\n  drawHighResSlantLines(ctx, workArea, metrics, mmToPixel) {\n    const slantAngle = metrics.slantAngle;\n    if (slantAngle === 0) return;\n    const radians = slantAngle * Math.PI / 180;\n    const slantSpacing = mmToPixel(4); // 4mm spacing between diagonal lines\n    const numberOfVerticals = Math.floor(workArea.width / slantSpacing);\n    ctx.strokeStyle = this.config.slantLineColor;\n    ctx.lineWidth = 1;\n    ctx.globalAlpha = 0.3;\n    ctx.setLineDash([2, 4]);\n    for (let i = 0; i <= numberOfVerticals; i++) {\n      const x = workArea.left + i * slantSpacing;\n      const topY = workArea.top;\n      const bottomY = workArea.top + workArea.height;\n      const offset = workArea.height * Math.tan(radians);\n      this.drawLine(ctx, x, topY, x + offset, bottomY);\n    }\n    ctx.setLineDash([]);\n    ctx.globalAlpha = 1;\n  }\n  drawHighResGrid(ctx, workArea, mmToPixel) {\n    if (this.config.gridType === 'none') return;\n    const gridSpacing = mmToPixel(5); // 5mm grid\n    const isDotted = this.config.gridType === 'dotted';\n    ctx.strokeStyle = this.config.gridColor;\n    ctx.lineWidth = 0.5;\n    ctx.globalAlpha = this.config.gridOpacity;\n    if (isDotted) {\n      ctx.fillStyle = this.config.gridColor;\n\n      // Draw dots at grid intersections\n      for (let x = workArea.left; x <= workArea.left + workArea.width; x += gridSpacing) {\n        for (let y = workArea.top; y <= workArea.top + workArea.height; y += gridSpacing) {\n          ctx.beginPath();\n          ctx.arc(x, y, 1, 0, 2 * Math.PI);\n          ctx.fill();\n        }\n      }\n    } else {\n      // Vertical grid lines\n      for (let x = workArea.left; x <= workArea.left + workArea.width; x += gridSpacing) {\n        this.drawLine(ctx, x, workArea.top, x, workArea.top + workArea.height);\n      }\n\n      // Horizontal grid lines\n      for (let y = workArea.top; y <= workArea.top + workArea.height; y += gridSpacing) {\n        this.drawLine(ctx, workArea.left, y, workArea.left + workArea.width, y);\n      }\n    }\n    ctx.globalAlpha = 1;\n  }\n  drawLine(ctx, x1, y1, x2, y2) {\n    ctx.beginPath();\n    ctx.moveTo(x1, y1);\n    ctx.lineTo(x2, y2);\n    ctx.stroke();\n  }\n}","map":{"version":3,"names":["jsPDF","A4_CONFIG","PDFExporter","constructor","templateGenerator","config","exportToPDF","filename","highResCanvas","createHighResolutionCanvas","Error","generateHighResTemplate","pdf","orientation","unit","format","imgData","toDataURL","pdfWidth","height","width","pdfHeight","addImage","save","remove","error","console","canvas","document","createElement","ctx","getContext","pixelWidth","pixelHeight","scale","dpi","style","fillStyle","fillRect","metrics","getCalculatedMetrics","margins","mmToPixel","mm","workArea","left","top","right","bottom","drawHighResBaselines","showSlantLines","drawHighResSlantLines","showGrid","drawHighResGrid","lineSpacing","xHeight","capHeight","ascenderHeight","descenderDepth","startY","numberOfLines","Math","floor","lineCap","i","baselineY","strokeStyle","baselineColor","lineWidth","drawLine","showGuideLines","gridColor","globalAlpha","slantAngle","radians","PI","slantSpacing","numberOfVerticals","slantLineColor","setLineDash","x","topY","bottomY","offset","tan","gridType","gridSpacing","isDotted","gridOpacity","y","beginPath","arc","fill","x1","y1","x2","y2","moveTo","lineTo","stroke"],"sources":["/Users/mikeyokei/Downloads/Drawing Sheet/src/utils/pdfExporter.js"],"sourcesContent":["import jsPDF from 'jspdf';\nimport { A4_CONFIG } from '../store/templateStore';\n\nexport class PDFExporter {\n  constructor(templateGenerator, config) {\n    this.templateGenerator = templateGenerator;\n    this.config = config;\n  }\n\n  async exportToPDF(filename = 'handwriting-template.pdf') {\n    try {\n      // Create high-resolution version for PDF\n      const highResCanvas = this.createHighResolutionCanvas();\n      \n      if (!highResCanvas) {\n        throw new Error('Failed to create high-resolution canvas');\n      }\n\n      // Generate the template at high resolution\n      await this.generateHighResTemplate(highResCanvas);\n      \n      // Create PDF\n      const pdf = new jsPDF({\n        orientation: this.config.orientation === 'landscape' ? 'l' : 'p',\n        unit: 'mm',\n        format: 'a4',\n      });\n\n      // Convert canvas to image and add to PDF\n      const imgData = highResCanvas.toDataURL('image/png', 1.0);\n      \n      const pdfWidth = this.config.orientation === 'landscape' ? A4_CONFIG.height : A4_CONFIG.width;\n      const pdfHeight = this.config.orientation === 'landscape' ? A4_CONFIG.width : A4_CONFIG.height;\n      \n      pdf.addImage(imgData, 'PNG', 0, 0, pdfWidth, pdfHeight);\n      \n      // Save the PDF\n      pdf.save(filename);\n      \n      // Clean up\n      highResCanvas.remove();\n      \n      return true;\n    } catch (error) {\n      console.error('Error exporting PDF:', error);\n      return false;\n    }\n  }\n\n  createHighResolutionCanvas() {\n    const canvas = document.createElement('canvas');\n    const ctx = canvas.getContext('2d');\n    \n    // Set high DPI dimensions\n    canvas.width = A4_CONFIG.pixelWidth;\n    canvas.height = A4_CONFIG.pixelHeight;\n    \n    // Scale context for high DPI\n    const scale = A4_CONFIG.dpi / 96; // 96 is standard screen DPI\n    ctx.scale(scale, scale);\n    \n    // Set canvas style for proper rendering\n    canvas.style.width = A4_CONFIG.width + 'mm';\n    canvas.style.height = A4_CONFIG.height + 'mm';\n    \n    return canvas;\n  }\n\n  async generateHighResTemplate(canvas) {\n    const ctx = canvas.getContext('2d');\n    \n    // Clear canvas\n    ctx.fillStyle = 'white';\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n    \n    // Calculate metrics for high resolution\n    const metrics = this.config.getCalculatedMetrics();\n    const margins = this.config.margins;\n    \n    // Convert mm to pixels for high-res rendering\n    const mmToPixel = (mm) => (mm * A4_CONFIG.dpi) / 25.4;\n    \n    const workArea = {\n      left: mmToPixel(margins.left),\n      top: mmToPixel(margins.top),\n      width: mmToPixel(A4_CONFIG.width - margins.left - margins.right),\n      height: mmToPixel(A4_CONFIG.height - margins.top - margins.bottom),\n    };\n    \n    // Draw baselines\n    this.drawHighResBaselines(ctx, workArea, metrics, mmToPixel);\n    \n    // Draw slant lines if enabled\n    if (this.config.showSlantLines) {\n      this.drawHighResSlantLines(ctx, workArea, metrics, mmToPixel);\n    }\n    \n    // Draw grid if enabled\n    if (this.config.showGrid) {\n      this.drawHighResGrid(ctx, workArea, mmToPixel);\n    }\n  }\n\n  drawHighResBaselines(ctx, workArea, metrics, mmToPixel) {\n    const lineSpacing = mmToPixel(metrics.lineSpacing);\n    const xHeight = mmToPixel(metrics.xHeight);\n    const capHeight = mmToPixel(metrics.capHeight);\n    const ascenderHeight = mmToPixel(metrics.ascenderHeight);\n    const descenderDepth = mmToPixel(metrics.descenderDepth);\n    \n    const startY = workArea.top + ascenderHeight;\n    const numberOfLines = Math.floor((workArea.height - ascenderHeight - descenderDepth) / lineSpacing);\n    \n    ctx.lineCap = 'round';\n    \n    for (let i = 0; i < numberOfLines; i++) {\n      const baselineY = startY + (i * lineSpacing);\n      \n      // Baseline (main writing line) - always show\n      ctx.strokeStyle = this.config.baselineColor;\n      ctx.lineWidth = 2;\n      this.drawLine(ctx, workArea.left, baselineY, workArea.left + workArea.width, baselineY);\n      \n      // Only show guide lines if enabled\n      if (this.config.showGuideLines) {\n        // X-height line\n        ctx.strokeStyle = this.config.gridColor;\n        ctx.lineWidth = 1;\n        ctx.globalAlpha = 0.7;\n        this.drawLine(ctx, workArea.left, baselineY - xHeight, workArea.left + workArea.width, baselineY - xHeight);\n        \n        // Cap height line\n        this.drawLine(ctx, workArea.left, baselineY - capHeight, workArea.left + workArea.width, baselineY - capHeight);\n        \n        // Ascender line\n        ctx.globalAlpha = 0.5;\n        this.drawLine(ctx, workArea.left, baselineY - ascenderHeight, workArea.left + workArea.width, baselineY - ascenderHeight);\n        \n        // Descender line\n        this.drawLine(ctx, workArea.left, baselineY + descenderDepth, workArea.left + workArea.width, baselineY + descenderDepth);\n        \n        ctx.globalAlpha = 1;\n      }\n    }\n  }\n\n  drawHighResSlantLines(ctx, workArea, metrics, mmToPixel) {\n    const slantAngle = metrics.slantAngle;\n    \n    if (slantAngle === 0) return;\n    \n    const radians = (slantAngle * Math.PI) / 180;\n    const slantSpacing = mmToPixel(4); // 4mm spacing between diagonal lines\n    const numberOfVerticals = Math.floor(workArea.width / slantSpacing);\n    \n    ctx.strokeStyle = this.config.slantLineColor;\n    ctx.lineWidth = 1;\n    ctx.globalAlpha = 0.3;\n    ctx.setLineDash([2, 4]);\n    \n    for (let i = 0; i <= numberOfVerticals; i++) {\n      const x = workArea.left + (i * slantSpacing);\n      const topY = workArea.top;\n      const bottomY = workArea.top + workArea.height;\n      const offset = workArea.height * Math.tan(radians);\n      \n      this.drawLine(ctx, x, topY, x + offset, bottomY);\n    }\n    \n    ctx.setLineDash([]);\n    ctx.globalAlpha = 1;\n  }\n\n  drawHighResGrid(ctx, workArea, mmToPixel) {\n    if (this.config.gridType === 'none') return;\n    \n    const gridSpacing = mmToPixel(5); // 5mm grid\n    const isDotted = this.config.gridType === 'dotted';\n    \n    ctx.strokeStyle = this.config.gridColor;\n    ctx.lineWidth = 0.5;\n    ctx.globalAlpha = this.config.gridOpacity;\n    \n    if (isDotted) {\n      ctx.fillStyle = this.config.gridColor;\n      \n      // Draw dots at grid intersections\n      for (let x = workArea.left; x <= workArea.left + workArea.width; x += gridSpacing) {\n        for (let y = workArea.top; y <= workArea.top + workArea.height; y += gridSpacing) {\n          ctx.beginPath();\n          ctx.arc(x, y, 1, 0, 2 * Math.PI);\n          ctx.fill();\n        }\n      }\n    } else {\n      // Vertical grid lines\n      for (let x = workArea.left; x <= workArea.left + workArea.width; x += gridSpacing) {\n        this.drawLine(ctx, x, workArea.top, x, workArea.top + workArea.height);\n      }\n      \n      // Horizontal grid lines\n      for (let y = workArea.top; y <= workArea.top + workArea.height; y += gridSpacing) {\n        this.drawLine(ctx, workArea.left, y, workArea.left + workArea.width, y);\n      }\n    }\n    \n    ctx.globalAlpha = 1;\n  }\n\n  drawLine(ctx, x1, y1, x2, y2) {\n    ctx.beginPath();\n    ctx.moveTo(x1, y1);\n    ctx.lineTo(x2, y2);\n    ctx.stroke();\n  }\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}